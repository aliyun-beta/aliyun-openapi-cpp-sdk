{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"p",
				"proxy_host_	std::string"
			],
			[
				"size",
				"size_t"
			],
			[
				"pro",
				"proxy_host_"
			],
			[
				"host",
				"Host"
			],
			[
				"c",
				"c_str() const	const char *"
			],
			[
				"getRequest",
				"GetRequestHeader(std::string field)	std::string"
			],
			[
				"sign",
				"sign_compute	std::string"
			],
			[
				"enco",
				"encoded	std::string"
			],
			[
				"encode",
				"encode_compute_hmac_sha1(std::string access_key, char *buf_in, int len_buf_in)	std::string"
			],
			[
				"getReques",
				"GetRequestMethod()	std::string"
			],
			[
				"GetAll",
				"GetAllRequestQuery()	std::map<std::string, std::string> &"
			],
			[
				"GEt",
				"GetAllRequestQuery()	std::map<std::string, std::string> &"
			],
			[
				"add",
				"AddRequestQuery(std::string field, std::string value)	AliHttpRequest &"
			],
			[
				"setR",
				"SetResponseBody(std::string body)	void"
			],
			[
				"get",
				"GetRequestQuery(std::string query_name)	std::string"
			],
			[
				"vec",
				"vec_query_pair	std::vector<std::string>"
			],
			[
				"http_parser_par",
				"http_parser_parse_url_(const char *buf, size_t buflen, int is_connect, struct http_parser_url *u)	int"
			],
			[
				"map",
				"map_request_query_	std::map<std::string, std::string>"
			],
			[
				"request_",
				"request_url_	std::string"
			],
			[
				"SetResponse",
				"SetResponseBody(std::string body)	void"
			],
			[
				"requ",
				"request_method_	std::string"
			],
			[
				"http_metho",
				"http_method_str_(enum http_method m)	const char *"
			],
			[
				"write",
				"write_buf	char[]"
			],
			[
				"h",
				"http_errno	unsigned char"
			],
			[
				"recv",
				"recv(int, void *__buff, size_t __len, int __flags)	ssize_t"
			],
			[
				"addr",
				"addr_client	sockaddr_in"
			],
			[
				"sockadd",
				"sockaddr	struct"
			],
			[
				"bind",
				"bind(int, const struct sockaddr *__my_addr, socklen_t __addrlen)	int"
			],
			[
				"AF_IN",
				"AF_INET	macro"
			],
			[
				"pthread",
				"pthread_t	typedef"
			],
			[
				"urlenco",
				"urlencode(const std::string c)	std::string"
			],
			[
				"to",
				"to_replace	std::string"
			],
			[
				"do",
				"do_write	bool"
			],
			[
				"req",
				"req_body	std::string"
			],
			[
				"se",
				"sechema_	std::string"
			],
			[
				"pa",
				"path_	std::string"
			],
			[
				"ma",
				"map_request_headers_	std::map<std::string, std::string>"
			],
			[
				"rel",
				"relay_header_fieldcb"
			],
			[
				"Add",
				"addRequestQuery(std::string field, std::string value)	AliHttpRequest &"
			],
			[
				"Ali",
				"AliyunRpcRequest	class"
			],
			[
				"read",
				"readAllLeftResponseBody(std::string &body)	int"
			],
			[
				"MAX_",
				"MAX_OUTPUT_BUFFER	macro"
			],
			[
				"PROTO",
				"PROTO_DIRECT	config_protocol"
			],
			[
				"PROTO_",
				"PROTO_REJECT	config_protocol"
			],
			[
				"NETWORK",
				"NETWORK_NONE	enum <anonymous>"
			],
			[
				"ROUTING",
				"ROUTING_OPTIMIZE_ONCE	enum <anonymous>"
			],
			[
				"er",
				"tunnel_error_pos	int"
			],
			[
				"int",
				"int64_t	typedef"
			],
			[
				"s_scale",
				"s_scale_resolve_reqs	ScaleResolveVec *"
			],
			[
				"s_",
				"s_scale_resolve_reqs	ScaleResolveVec *"
			],
			[
				"e_t",
				"e_ident	unsigned char [16]"
			],
			[
				"e",
				"e_ident	unsigned char [16]"
			],
			[
				"e_ph",
				"e_phnum	Elf32_Half"
			],
			[
				"sh",
				"shstr	const char *"
			],
			[
				"eph",
				"e_phnum	Elf32_Half"
			],
			[
				"is",
				"is_wzip	bool"
			],
			[
				"RUNMODE",
				"RUNMODE_NATIVE_HOOK_ONLY	RunMode"
			],
			[
				"s_is",
				"s_is_tcp_hook_alone	bool"
			],
			[
				"u",
				"use_spdy	bool"
			],
			[
				"ai",
				"ai_family	int"
			],
			[
				"mtunnel_listn",
				"mtunnel_listen_ipv6_fini()	void"
			],
			[
				"inad",
				"in_addr_t	typedef"
			],
			[
				"mtunnel_listen",
				"mtunnel_listen_ipv6_init()	int"
			],
			[
				"si",
				"sin6_addr	struct in6_addr"
			],
			[
				"sock",
				"socklen_t	macro"
			],
			[
				"get_ip",
				"get_ipv6_local_addr()	struct sockaddr *"
			],
			[
				"confirm",
				"confirm_bind_port_v4(int fd)	int"
			],
			[
				"ina",
				"in_addr_t	typedef"
			],
			[
				"sockaddr",
				"sockaddr_in6	struct"
			],
			[
				"sin",
				"sin_port	in_port_t"
			],
			[
				"s",
				"sin_family	sa_family_t"
			],
			[
				"sockad",
				"sockaddr_in	struct"
			],
			[
				"AF_INET",
				"AF_INET6	macro"
			],
			[
				"set_acce",
				"set_access_log_path_setted()	void"
			],
			[
				"tcp_acc",
				"tcp_access_log_open()	int"
			],
			[
				"NDK_CMD_SET",
				"NDK_CMD_SET_ACCESS_LOG_PATH	ndk_command"
			],
			[
				"re",
				"regex_str	char *"
			],
			[
				"tmp",
				"tmp_path	char[]"
			],
			[
				"g",
				"gdomain_proto	int"
			],
			[
				"get_routin",
				"get_routing_optimize_policy()	int"
			],
			[
				"mtask",
				"mtask_cancel(mtask_info_t *task)	void"
			],
			[
				"LOGI",
				"LOGI(...)	macro"
			],
			[
				"socka",
				"sockaddr_in	struct"
			],
			[
				"han",
				"client_handler	void *"
			],
			[
				"PROTO_WSP",
				"PROTO_WSP_UDP_1	BackendProtocol"
			],
			[
				"send",
				"send(int, const void *__buff, size_t __len, int __flags)	ssize_t"
			],
			[
				"uint",
				"uint64_t	typedef"
			],
			[
				"BEV_EVENT",
				"BEV_EVENT_EOF	macro"
			],
			[
				"mtask_info",
				"mtask_info_t	typedef"
			],
			[
				"mtask_",
				"mtask_info_t	typedef"
			],
			[
				"event_get_cal",
				"event_get_callback_arg(const struct event *ev)	void *"
			],
			[
				"BEV_OPT",
				"BEV_OPT_DEFER_CALLBACKS	bufferevent_options"
			],
			[
				"real",
				"real_ip	std::string*"
			],
			[
				"pending",
				"pending_conncb_tmr	struct event *"
			],
			[
				"pen",
				"pending_conncb_args	void *"
			],
			[
				"clean",
				"clean_pending_event_info()	void"
			],
			[
				"pend",
				"pending_eventcb_tmr	struct event *"
			],
			[
				"client",
				"client_fd"
			],
			[
				"relay",
				"relay_ss"
			],
			[
				"content",
				"content_length"
			],
			[
				"arm",
				"armv7"
			],
			[
				"htp_re",
				"htp_response	http_parser *"
			],
			[
				"TUNN",
				"TUNNEL_UNAVAILABLE	enum <anonymous>"
			],
			[
				"ROUTING_",
				"ROUTING_RTT_MAX	const int"
			],
			[
				"MATO",
				"MATO_LOG(int level, const char *tag, const char *format, ...)	void"
			],
			[
				"filen",
				"file_name	const char*"
			],
			[
				"buf",
				"buf_data	char*"
			],
			[
				"dec",
				"decrypt_memory(char *buffer)	int"
			],
			[
				"encr",
				"encrpyt_memory(char *buffer)	int"
			],
			[
				"gunzipfilter_",
				"gunzip_filter_free(gunzip_filter_t *filter)	void"
			],
			[
				"len_",
				"len_read	int"
			],
			[
				"bu",
				"buf_len	int"
			],
			[
				"len_re",
				"len_real_read	int"
			],
			[
				"gunzip_fil",
				"gunzip_filter_put(gunzip_filter_t *filter, char *data, int len)	int"
			],
			[
				"gunzip",
				"gunzip_filter_get_output(gunzip_filter_t *filter)	struct evbuffer *"
			],
			[
				"gun",
				"gunzip_filter_t	typedef"
			],
			[
				"sz_",
				"sz_full_name	char[]"
			],
			[
				"in",
				"input	FILE*"
			],
			[
				"SEEK",
				"SEEK_SET	macro"
			],
			[
				"inpu",
				"input_len	uint32_t"
			],
			[
				"gzip_filter_",
				"gzip_filter_free(gzip_filter_t *filter)	void"
			],
			[
				"filter",
				"filter_out_buf	evbuffer*"
			],
			[
				"gzip",
				"gzip_filter_put(gzip_filter_t *filter, char *data, int len)	int"
			],
			[
				"gzip_filter",
				"gzip_filter_get_output(gzip_filter_t *filter)	struct evbuffer *"
			],
			[
				"RESP_READER_",
				"RESP_READER_MSG_COMPLETE	enum <anonymous>"
			],
			[
				"get_routing",
				"get_routing_scale_timespan()	int"
			],
			[
				"d",
				"downstream_rtt	int"
			],
			[
				"pos",
				"pos_end	char*"
			]
		]
	},
	"buffers":
	[
		{
			"file": "http/ali_http_request.h",
			"settings":
			{
				"buffer_size": 1614,
				"line_ending": "Windows"
			}
		},
		{
			"file": "http/ali_http_request.cc",
			"settings":
			{
				"buffer_size": 10780,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#include <map>\n#include <string>\n#include <pthread.h>\nstruct http_parser;\nclass HttpTestListener {\npublic:\n  HttpTestListener(int port);\n  ~HttpTestListener();\n  std::string GetRequestUrl();\n  std::string GetRequestMethod();\n  std::string GetRequestPath();\n  std::map<std::string,std::string>& GetAllRequestQuery();\n  std::map<std::string,std::string>& GetAllRequestHeader();\n  std::string GetRequestQuery(std::string query_name);\n  std::string GetRequestHeader(std::string field);\n  std::string GetRequestBody();\n  void SetResponseStatus(int status);\n  void AddResponseHeader(std::string field, std::string value);\n  void SetResponseBody(std::string body);\n  int Start();\n  void WaitComplete();\nprivate:\n  bool is_request_complete_;\n  pthread_t thread_;\n  int fd_;\n  int local_port_;\n  int response_status_code_;\n  std::string request_url_;\n  std::string request_body_;\n  std::string response_body_;\n  std::string request_method_;\n  std::map<std::string,std::string> map_request_query_;\n  std::map<std::string,std::string> map_request_header_;\n  std::map<std::string,std::string> map_response_header_;\n  std::string last_request_field_;\n  std::string last_request_value_;\n  bool is_last_value_;\n  http_parser* parser_;\n  friend void ResponseHandleParserEvent(HttpTestListener* listener, int type, char* buf, int len);\n  friend void * ResponseHandleRun(void*);\n};",
			"file": "test/http_test_listener.h",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 1363,
				"line_ending": "Windows"
			}
		},
		{
			"file": "test/test.cc",
			"settings":
			{
				"buffer_size": 8539,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#include \"http_test_listener.h\"\n#include \"ali_sys_network.h\"\n#include \"http_parser.h\"\n#include \"ali_string_utils.h\"\n#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <pthread.h>\n#include <vector>\nenum {\n  PARSER_EVENT_MSG_BEGIN,\n  PARSER_EVENT_STATUS,\n  PARSER_EVENT_URL,\n  PARSER_EVENT_FIELD,\n  PARSER_EVENT_VALUE,\n  PARSER_EVENT_HEADER_COMPLETE,\n  PARSER_EVENT_BODY,\n  PARSER_EVENT_MSG_COMPLETE\n};\n\nstatic const char* get_status_string(int status_code, int upgrade)\n{\n  switch(status_code) {\n  case 100: return \"100 Continue\";\n  case 101: return \"101 Switching Protocols\";\n  case 200: return (upgrade?\"200 Connection established\":\"200 OK\");\n  case 201: return \"201 Created\";\n  case 202: return \"202 Accepted\";\n  case 203: return \"203 Non-Authoritative Information\";\n  case 204: return \"204 No Content\";\n  case 205: return \"205 Reset Content\";\n  case 206: return \"206 Partial Content\";\n  case 300: return \"300 Multiple Choices\";\n  case 301: return \"301 Moved Permanently\";\n  case 302: return \"302 Found\";\n  case 303: return \"303 See Other\";\n  case 304: return \"304 Not Modified\";\n  case 305: return \"305 Use Proxy\";\n  case 306: return \"306 (Unused)\";\n  case 307: return \"307 Temporary Redirect\";\n  case 400: return \"400 Bad Request\";\n  case 401: return \"401 Unauthorized\";\n  case 402: return \"402 Payment Required\";\n  case 403: return \"403 Forbidden\";\n  case 404: return \"404 Not Found\";\n  case 405: return \"405 Method Not Allowed\";\n  case 406: return \"406 Not Acceptable\";\n  case 407: return \"407 Proxy Authentication Required\";\n  case 408: return \"408 Request Timeout\";\n  case 409: return \"409 Conflict\";\n  case 410: return \"410 Gone\";\n  case 411: return \"411 Length Required\";\n  case 412: return \"412 Precondition Failed\";\n  case 413: return \"413 Request Entity Too Large\";\n  case 414: return \"414 Request-URI Too Long\";\n  case 415: return \"415 Unsupported Media Type\";\n  case 416: return \"416 Requested Range Not Satisfiable\";\n  case 417: return \"417 Expectation Failed\";\n  case 500: return \"500 Internal Server Error\";\n  case 501: return \"501 Not Implemented\";\n  case 502: return \"502 Bad Gateway\";\n  case 503: return \"503 Service Unavailable\";\n  case 504: return \"504 Gateway Timeout\";\n  case 505: return \"505 HTTP Version Not Supported\";\n  default: return \"\";\n  }\n}\n\nvoid ResponseHandleParserEvent(HttpTestListener* req, int type, char* buf, int len) {\n  switch(type) {\n  case PARSER_EVENT_URL: {\n    req->request_url_.assign(buf, len);\n    http_parser_url url;\n    http_parser_parse_url_(buf, len, 0, &url);\n    if(url.field_set & 1 << (UF_QUERY)) {\n      std::string query;\n      query.assign(&buf[url.field_data[UF_QUERY].off], url.field_data[UF_QUERY].len);\n      std::vector<std::string> vec_query_pair;\n      strsplit(query, vec_query_pair, \"&\");\n      for(int i = 0; i < vec_query_pair.size(); i++) {\n        std::string str_pair = vec_query_pair[i];\n        int pos = str_pair.find(\"=\");\n        req->map_request_query_[str_pair.substr(0, pos)] = str_pair.substr(pos + 1, str_pair.size() - pos - 1);\n      }\n    }\n    \n    break;\n  }\n  case PARSER_EVENT_FIELD: {\n    if(req->is_last_value_) {\n      req->map_request_header_[req->last_request_field_] = req->last_request_value_;\n      req->last_request_field_ = \"\";\n      req->last_request_value_ = \"\";\n    }\n     req->last_request_field_.append(buf, len);\n     req->is_last_value_ = false;\n  }\n    break;\n\n  case PARSER_EVENT_VALUE: {\n    req->is_last_value_ = true;\n    req->last_request_value_.append(buf, len);\n    break;\n  }\n\n  case PARSER_EVENT_HEADER_COMPLETE: {\n    if(req->last_request_field_.size() > 0) {\n      req->map_request_header_[req->last_request_field_] = req->last_request_value_;\n      req->last_request_field_ = \"\";\n      req->last_request_value_ = \"\";\n    }\n\n    req->request_method_ = http_method_str_((http_method)req->parser_->method);\n    break;\n  }\n  case PARSER_EVENT_BODY: {\n    req->request_body_.append(buf, len);\n    break;\n  }\n\n  case PARSER_EVENT_MSG_COMPLETE: {\n    req->is_request_complete_ = true;\n    break;\n  }\n}\n\n}\n\nint relay_message_begincb(http_parser *parser) {\n    HttpTestListener* req = (HttpTestListener*)parser->data;\n    ResponseHandleParserEvent(req, PARSER_EVENT_MSG_BEGIN, NULL, 0);\n   return 0;\n}\n\nstatic int relay_status_completecb(http_parser *parser) {\n    HttpTestListener* req = (HttpTestListener*)parser->data;\n    ResponseHandleParserEvent(req, PARSER_EVENT_STATUS, NULL, 0);\n   return 0;\n}\n\nstatic int relay_url_complete(http_parser* parser, const char *data, size_t len)\n{\n  HttpTestListener* req = (HttpTestListener*)parser->data;\n\n  ResponseHandleParserEvent(req, PARSER_EVENT_URL, (char*)data, len);\n  return 0;\n}\n\nstatic int relay_header_fieldcb(http_parser *parser, const char *data, size_t len) \n{\n  HttpTestListener* req = (HttpTestListener*)parser->data;\n  ResponseHandleParserEvent(req, PARSER_EVENT_FIELD, (char*)data, len);\n  return 0;\n}\n\nstatic int relay_header_valuecb(http_parser *parser, const char *data, size_t len)\n{ \n  HttpTestListener* req = (HttpTestListener*)parser->data;\n  ResponseHandleParserEvent(req, PARSER_EVENT_VALUE, (char*)data, len);\n  return 0;\n}\n\nstatic int relay_headers_completecb(http_parser *parser)\n{\n  HttpTestListener* req = (HttpTestListener*)parser->data;\n  ResponseHandleParserEvent(req, PARSER_EVENT_HEADER_COMPLETE, NULL, 0);\n  return 0;\n}\n\nstatic int relay_bodycb(http_parser *parser, const char *data, size_t len) {\n  HttpTestListener* req = (HttpTestListener*)parser->data;\n  ResponseHandleParserEvent(req, PARSER_EVENT_BODY, (char*)data, len);\n  return 0;\n}\n\nstatic int relay_message_completecb(http_parser *parser)\n{\n  HttpTestListener* req = (HttpTestListener*)parser->data;\n  ResponseHandleParserEvent(req, PARSER_EVENT_MSG_COMPLETE, NULL, 0);\n  return 0;\n}\n\nstatic http_parser_settings htp_hooks = {\n  relay_message_begincb,                     //http_cb      on_message_begin\n  relay_url_complete,       //http_data_cb on_url;\n  relay_status_completecb,  //http_cb on_status_complete \n  relay_header_fieldcb,     //http_data_cb on_header_field;\n  relay_header_valuecb,     //http_data_cb on_header_value;\n  relay_headers_completecb, //http_cb      on_headers_complete;\n  relay_bodycb,             //http_data_cb on_body;*/\n  relay_message_completecb  //http_cb      on_message_complete;\n};\n\n void * ResponseHandleRun(void* args) {\n  HttpTestListener* client = (HttpTestListener*)args;\n  char buf[4096] = {};\n  HttpTestListener* handler = (HttpTestListener*)args;\n  int fd_client = 0;\n  socklen_t len_client = sizeof(sockaddr_in);  \n  sockaddr_in addr_client = {};\n  fd_client = accept(handler->fd_, (sockaddr*)&addr_client, &len_client);\n  http_parser_init_(handler->parser_, HTTP_REQUEST);\n  handler->parser_->data = client;\n  for(;;) {\n    int len = recv(fd_client, buf, sizeof(buf), 0);\n    if(len <= 0) {\n      break;\n    }\n    http_parser_execute_(client->parser_, &htp_hooks, buf, len);\n\n    if(handler->parser_->http_errno != 0 || handler->is_request_complete_) {\n      break;\n    }\n  }\n\n  if(handler->is_request_complete_) {\n    char write_buf[4096];\n    snprintf(write_buf, sizeof(write_buf), \"HTTP/1.1 %s\\r\\n\", get_status_string(handler->response_status_code_, 0));\n    write(fd_client, write_buf, strlen(write_buf));\n    for(std::map<std::string, std::string>::iterator it = handler->map_response_header_.begin();\n        it !=  handler->map_response_header_.end(); it++) {\n      snprintf(write_buf, sizeof(write_buf), \"%s: %s\\r\\n\", it->first.c_str(), it->second.c_str());\n      write(fd_client, write_buf, strlen(write_buf));\n    }\n    write(fd_client, \"\\r\\n\", 2);\n\n    if(client->response_body_.size() > 0) {\n      write(fd_client, client->response_body_.c_str(), client->response_body_.size());\n    }\n\n  }\nout:\n  close(handler->fd_);\n  close(fd_client);\n  return NULL;\n}\nHttpTestListener::HttpTestListener(int port) {\n  response_status_code_ = 200;\n  is_request_complete_ = false;\n  is_last_value_ = false;\n  this->local_port_ = port;\n  this->parser_ = (http_parser*)calloc(1, sizeof(http_parser));\n}\n\nHttpTestListener::~HttpTestListener() {\n  free(this->parser_);\n}\n\nstd::string HttpTestListener::GetRequestUrl() {\n  return this->request_url_;\n}\nstd::string HttpTestListener::GetRequestMethod() {\n  return this->request_method_;\n}\n\nstd::string HttpTestListener::GetRequestBody() {\n  return this->request_body_;\n}\n\nstd::string HttpTestListener::GetRequestPath() {\n\n}\nstd::map<std::string,std::string>& HttpTestListener::GetAllRequestQuery() {\n  return this->map_request_query_;\n}\nstd::map<std::string,std::string>& HttpTestListener::GetAllRequestHeader() {\n  return this->map_request_header_;\n}\n\nstd::string HttpTestListener::GetRequestQuery(std::string query_name) {\n  std::map<std::string, std::string>::iterator it = this->map_request_query_.find(query_name);\n  if(it == this->map_request_query_.end()) {\n    return \"\";\n  } else {\n    return it->second;\n  }\n}\nstd::string HttpTestListener::GetRequestHeader(std::string field) {\n  std::map<std::string, std::string>::iterator it = this->map_request_header_.find(field);\n  if(it == this->map_request_header_.end()) {\n    return \"\";\n  } else {\n    return it->second;\n  }\n}\nvoid HttpTestListener::SetResponseStatus(int status) {\n  this->response_status_code_ = status;\n}\nvoid HttpTestListener::AddResponseHeader(std::string field, std::string value) {\n  this->map_response_header_[field] = value;\n}\nvoid HttpTestListener::SetResponseBody(std::string body) {\n  this->response_body_ = body;\n}\nint HttpTestListener::Start() {\n  sockaddr_in addr = {};\n  fd_ = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n  addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n  addr.sin_port = htons(local_port_);\n  addr.sin_family = AF_INET;\n  int opt=1;\n  setsockopt(fd_,SOL_SOCKET,SO_REUSEADDR,&opt,sizeof(opt));\n  if(bind(fd_, (struct sockaddr *)&addr, sizeof(sockaddr_in)) != 0) {\n    return -1;\n  }\n  if(listen(fd_, 5) != 0) {\n    return -1;\n  }\n\n  pthread_create(&thread_, NULL, ResponseHandleRun, this);\n\n  return 0;\n}\nvoid HttpTestListener::WaitComplete() {\n  pthread_join(thread_, NULL);\n}\n\n ",
			"file": "test/http_test_listener.cc",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 10039,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Makefile",
			"settings":
			{
				"buffer_size": 4628,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 146.0,
		"history":
		[
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/F/aliyun_generater/aliyun_api_core/lib"
	],
	"file_history":
	[
		"/G/aliyun_test_export2/CMakeLists.txt",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/ali_roa_request.cpp",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/ali_rpc_request.cc",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/test/test.cc",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/test/http_test_listener.h",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/test/http_test_listener.cc",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/Makefile",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/utils/ali_urlencode.h",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/utils/ali_urlencode.cpp",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/third_party/http_parser/http_parser.c",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/ali_rpc_sign.cc",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/ali_rpc_sign.h",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/test/md5_test",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/http/ali_tls_connection.cc",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/http/ali_tcp_connection.cc",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/http/ali_http_request.h",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/http/ali_http_request.cc",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/utils/ali_encode_utils.cpp",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/utils/ali_encode_utils.h",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/test/http_request_test.cc",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/http/ali_tcp_connection.h",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/http/ali_tls_connection.h",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/utils/ali_string_utils.cpp",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/utils/ali_string_utils.h",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/utils/ali_sys_network.h",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/ali_rpc_request.h",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/ali_roa_request.h",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/ali_api_core.cc",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/http/ali_connection.h",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/third_party/mbedtls-2.1.2/include/mbedtls/ssl.h",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/third_party/mbedtls-2.1.2/include/mbedtls/net.h",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/ali_api_core.h",
		"/F/packer_client/libwspx_4.5.3.json",
		"/F/packer_client/libwspx_4.5.4.json",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/AliyunRpcRequest.h",
		"/F/aliyun_generater_json/aliyun_generater_json/aliyun_api_core/http/AliHttpRequest.hpp",
		"/F/openapi-meta-master/openapi-meta-master/api-metadata/aliyun-api-metadata-cms/2015-08-01/Api/BatchCreateMetrics.json",
		"/F/openapi-meta-master/openapi-meta-master/api-metadata/aliyun-api-metadata-ecs/2014-05-26/Api/DescribeImages.json",
		"/F/openapi-meta-master/openapi-meta-master/api-metadata/aliyun-api-metadata-alert/2015-08-15/Api/ListAlert.json",
		"/F/openapi-meta-master/openapi-meta-master/api-metadata/aliyun-api-metadata-batchcompute/2013-01-11/Api/ListJobs.json",
		"/D/protobuf/README",
		"/F/openapi-meta-master/openapi-meta-master/api-metadata/aliyun-api-metadata-batchcompute/2013-01-11/Api/PostJob.json",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/http/wspx_header.c",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/wspx_settings.c",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/routing/routing_proxy.cc",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/routing/routing_scale.cc",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/protobuf/com/mato/ndk/wspx/Config.java",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/protobuf/config.proto",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/mtunnel.c",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/test/test.cc",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/routing/routing.h",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/routing/routing.c",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/routing/routing_config.cc",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/http/http_access_log.c",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/http/http_proxy.h",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/http/http_proxy.c",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/http/http_relay.c",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/wspx.h",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/http/http_access_log.h",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/tcp/tcp_connection.c",
		"/C/Users/Administrator/Desktop/debug.log",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/util/response_reader.cc",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/wspx_settings.h",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/wspx_ndk.c",
		"/F/mobile/rd/SDK/NDK/tags/libwspx_5.0.1/ios/libmtun/libmtun/libMtun.m",
		"/D/cygwin64/usr/include/sys/time.h",
		"/D/cygwin64/usr/include/sys/types.h",
		"/D/cygwin64/usr/include/machine/types.h",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/tcp/tcp_proxy.c",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libwsld/nativehook/nativehook.cc",
		"/F/mobile/rd/SDK/Docs/NDK/access_tcp_demo.log",
		"/C/Users/Administrator/Documents/Tencent Files/421593804/FileRecv/wspx_debug(1).log",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/util/wspx_list.h",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libwsld/nativehook/common.h",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libwsld/nativehook/elfio.cc",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libwsld/nativehook/elfutils.cc",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/http/http_response_parser.cc",
		"/D/cygwin64/usr/include/sys/elf32.h",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/test/val.txt",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libwsld/nativehook/elfutils.h",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/util/cutil.h",
		"/D/cygwin64/usr/include/sys/elf_common.h",
		"/C/ProgramData/Microsoft/AndroidNDK/android-ndk-r10e/platforms/android-12/arch-arm/usr/include/elf.h",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libwsld/mato-jni.cc",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libwsld/nativehook/elfhook.cc",
		"/C/Users/Administrator/Desktop/val.txt",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/third_party/libjpeg/jpeglib.h",
		"/C/Users/Administrator/Desktop/tcp.log",
		"/C/Users/Administrator/Downloads/gollum-4.0.1.gemspec.rz",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/p2sp/p2sp_subsys_file.cc",
		"/D/cygwin64/usr/include/cygwin/in.h",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/tcp/tcp_http_relay.c",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/m4t0.c",
		"/C/Users/Administrator/Desktop/debug.txt",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/dns/mdns_resolve.cc",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/ios/libmtun/libmtun/libMtun.h",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/util/wspx_log.c",
		"/C/Users/Administrator/Desktop/wspx_debug (3).log",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/routing/routing_ping.cc",
		"/C/Users/Administrator/Desktop/sigcnt2.log",
		"/F/new_debug.log",
		"/C/Users/Administrator/Desktop/logcat.txt",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/protobuf/config.c",
		"/C/Users/Administrator/Desktop/test (2).cc",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/tcp/tcp_port_map.cc",
		"/F/fitness/stock_recieve_juece/Debug/Moni/Moni.rar/compute.lua",
		"/F/fitness/stock_recieve_juece/Debug/Moni/中国/compute.lua",
		"/F/fitness/stock_recieve_juece/Debug/Moni/cy_30_强平仓条件/compute.lua",
		"/F/fitness/stock_recieve_juece/Debug/Moni/cy_30_强平仓_新高低/compute.lua",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/routing/routing_source.cc",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/Application.mk",
		"/C/Users/Administrator/Desktop/wspx_debug (2).log",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/tcp/tcp_access_log.c",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/third_party/libjpeg-turbo/cmakescripts/testclean.cmake",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/mtunnel.h",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/routing/routing_config.h",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/third_party/libwebp/src/utils/utils.c",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/third_party/libpt/pt_session.c",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/routing/routing_source.h",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/wspx_ndk.h",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/http/http_request_parser.cc",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libwsld/wspx_init.cc",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libwsld/unpack.cc",
		"/F/maps",
		"/F/libs.txt",
		"/F/mobile/rd/SDK/NDK/trunk/libwspx/jni/libmtun/tcp/tcp_connection.h",
		"/C/Users/Administrator/Desktop/wspx_debug.log",
		"/C/Users/Administrator/Desktop/Config.pb.h"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"F:\\aliyun_generater_json\\aliyun_generater_json\\aliyun_api_core",
			"C:\\Users\\Administrator\\Downloads\\aliyun-openapi-java-sdk-master\\aliyun-openapi-java-sdk-master\\aliyun-java-sdk-core\\src",
			"F:\\openapi-meta-master",
			"F:\\aliyun_new\\aliyun-api-ecs\\2014-05-26",
			"F:\\mobile\\rd\\SDK\\NDK\\trunk\\libwspx\\jni",
			"F:\\mobile\\rd\\SDK\\NDK\\trunk\\libwspx\\jni\\libmtun",
			"F:\\mobile\\rd\\SDK\\NDK\\trunk\\libwspx\\jni",
			"F:\\mobile\\rd\\SDK\\NDK\\trunk\\libwspx\\jni\\libwsld\\nativehook",
			"F:\\mobile\\rd\\SDK\\NDK\\trunk\\libwspx\\jni",
			"F:\\mobile\\rd\\SDK\\NDK\\trunk\\libwspx\\jni\\libmtun",
			"F:\\mobile\\rd\\SDK\\NDK\\trunk\\libwspx\\jni\\libmtun\\tcp",
			"F:\\mobile\\rd\\SDK\\NDK\\trunk\\libwspx\\jni\\libmtun",
			"F:\\mobile\\rd\\SDK\\NDK\\trunk\\libwspx\\jni\\third_party\\libpt",
			"F:\\mobile\\rd\\SDK\\NDK\\trunk\\libwspx\\jni",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx\\jni\\libmtun",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx\\jni\\libmtun\\spdy",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx\\ios",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx\\jni\\libmtun",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx\\jni\\libmtun\\spdy",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx\\jni\\libmtun",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx\\jni\\libmtun\\spdy",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx\\jni\\libmtun\\http",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx\\jni",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx\\jni\\libwsld",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx\\jni",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx\\jni\\",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx\\jni\\libwsld",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx\\jni\\libmtun",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx\\jni",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx\\jni\\libmtun\\p2sp",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx\\jni",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx\\jni\\libmtun",
			"F:\\mobile\\rd\\wspx\\tags\\libwspx_4.0.4_release_001\\jni",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx\\jni",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx\\jni\\libmtun\\p2sp",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx\\jni\\third_party\\libevent",
			"F:\\mobile\\rd\\wspx\\tags\\libwspx_4.2.0_release_002\\jni",
			"F:\\mobile\\rd\\wspx\\tags\\libwspx_4.2.0_release_002\\jni\\libwsld",
			"F:\\mobile\\rd\\wspx\\tags\\libwspx_4.2.1_release_001\\jni",
			"F:\\skynet-master",
			"F:\\mobile\\rd\\wspx\\tags\\libwspx_4.2.0_release_002",
			"F:\\mobile\\rd\\wspx\\tags\\libwspx_4.2.0_release_002\\ios",
			"F:\\mobile\\rd\\wspx\\tags\\libwspx_4.2.0_release_002\\jni",
			"F:\\mobile\\rd\\wspx\\tags\\libwspx_4.2.0_release_002\\ios\\libmtun",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx",
			"F:\\mobile\\rd\\wspx\\tags\\libwspx_4.2.0_release_002\\ios",
			"F:\\mobile\\rd\\wspx\\trunk\\libwspx\\jni",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"ecs",
			"response_body_",
			"fd_",
			"product_qingdao",
			"cn-qingdao",
			"product_shenzhen",
			"GetPath",
			"request_method_",
			"parser_",
			"establish",
			"200 OK",
			"response_body_",
			"read",
			"map_response_header_",
			"ResponseHandleParserEvent",
			"encode",
			"Recv",
			"buildPath",
			"parseUrl",
			"appendBody",
			"readAllLeftResponseBody",
			"readResponseBody",
			"getResponseStatusCode",
			"waitResponseHeaderComplete",
			"commitRequest",
			"addRequestQuery",
			"MyEipAddressType",
			"AddRequestHeader",
			";\n",
			"is_response_complete",
			"is_response_header_complete",
			"is_response_complete",
			"get_utc_string()",
			"getUniformUrl",
			"singureNonce",
			"AliHttpRequest::addRequestQuery",
			"method",
			"post",
			"gmt_time",
			"\"x-acs-version",
			"close",
			"RoaAcsRequest",
			"roarequst",
			"batchcompute",
			"roa",
			"\"apiStyle\":\"ROA\",",
			"\"apiStyle\":",
			"roa",
			"\"apiStyle\":",
			"\"pattern\":\"/projects/[",
			"HTTP",
			"\"method\":\"POST\"",
			"post",
			"owneraccount",
			"owneracount",
			"ownerid",
			"EipAddressType",
			"eip",
			"InstanceType",
			"DescribeInstancesResponseType",
			"EipAddressType",
			"response",
			"reuse",
			"bufferevent_set_timeouts",
			"timeout",
			"do_write_connect",
			"do_connect",
			"200",
			"PROTO_DIRECT",
			"routing_scale_append_by_config",
			"DIRECT",
			"routing_proxy_append_by_ip_resolve",
			"routing_scale_add_proxy_measure_http",
			"DIRECT",
			"routing_proxy_append_by_ip_resolve",
			"routing_scale_append_by_config",
			"resolved",
			"routing_scale_add_proxy_measure_http",
			"routing_proxy_append_by_ip_resolve:",
			"3AMgLSpoiae1OJ2ykMhoqA",
			"223.95.79.110",
			"testmaatcp.haplat.net.cdn20.com",
			"detect result",
			"routing_optimize_policy",
			"parse_req",
			"bypass",
			"get_via_proxy_type_string",
			"httpr_request_error",
			"select_backend_by_url",
			"http_parse_request",
			"select_backend_by_url",
			"get_via_proxy_type_string",
			"URL_FILTERED",
			"select_backend_by_url",
			"ndk_impl_reset_tunnel",
			"mtunnel_reset_tunnel",
			"is_wzip_chunked",
			"reserve_exif",
			"reserve",
			"routing_on_proxy_event_cfgproto",
			"get_error_pos_code",
			"resize_rate",
			"report success",
			"detect result",
			"current state=",
			"183.250",
			"resize_rate",
			"resize",
			"timestamp",
			"183.250.179.31",
			"detect result:",
			"current state=",
			"last scale",
			"current state=",
			"resolved",
			"timestamp",
			"reuse",
			"123.138.60.215",
			"current state=",
			"timestamp",
			"last scale",
			"120.209.141.92",
			"detect result:",
			"routing_scale_timespan",
			"detect result",
			"current state=",
			"scale_measure_free_connection",
			"resp_reader_fini"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"Read",
			"BuildPath",
			"ParseUrl",
			"AppendBody",
			"ReadResponseBody",
			"GetResponseStatusCode",
			"WaitResponseHeaderComplete",
			"CommitRequest",
			"addRequestQuery\naddRequestQuery\naddRequestQuery\naddRequestQuery\nCommitRequest",
			"AddRequestQuery",
			"AddRequestHeader",
			"MyEipAddressType",
			"ROUTING_RTT_MAX",
			"aver_continue_speed",
			"SetBev",
			"resp_reader_",
			"resp_reader_status_complete",
			"resp_reader_",
			"resp_reader_t",
			"tv_first_upload",
			"sdk_impl_p2p_write_cache",
			"sdk_impl_p2p_read_cache",
			"conn->conn_info.err_str",
			"backend_t",
			"tcp_transparent",
			"tcp_http_relay",
			"#include \"backend_settings.h\"",
			",",
			"_htp_response_",
			" Java_com_mato_android_matoid",
			"Java_com_mato_android_matoid",
			"com.mato.android"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "http/ali_http_request.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1614,
						"regions":
						{
						},
						"selection":
						[
							[
								754,
								796
							]
						],
						"settings":
						{
							"encoding_helper_encoding": "cp936",
							"origin_encoding": "ASCII",
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "http/ali_http_request.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10780,
						"regions":
						{
						},
						"selection":
						[
							[
								4398,
								4405
							]
						],
						"settings":
						{
							"encoding_helper_encoding": "cp936",
							"origin_encoding": "ASCII",
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1764.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "test/http_test_listener.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1363,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"encoding_helper_encoding": "UTF-8",
							"origin_encoding": "ASCII",
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "test/test.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8539,
						"regions":
						{
						},
						"selection":
						[
							[
								3624,
								3624
							]
						],
						"settings":
						{
							"encoding_helper_encoding": "UTF-8",
							"origin_encoding": "UTF-8",
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3680.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "test/http_test_listener.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10039,
						"regions":
						{
						},
						"selection":
						[
							[
								7578,
								7578
							]
						],
						"settings":
						{
							"encoding_helper_encoding": "UTF-8",
							"origin_encoding": "ASCII",
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4524.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4628,
						"regions":
						{
						},
						"selection":
						[
							[
								4327,
								4327
							]
						],
						"settings":
						{
							"encoding_helper_encoding": "cp936",
							"origin_encoding": "ASCII",
							"syntax": "Packages/Makefile/Makefile.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1620.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "core.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"test.cc",
				"test\\test.cc"
			],
			[
				"alihttp",
				"http\\AliHttpRequest.hpp"
			],
			[
				"batch",
				"openapi-meta-master\\api-metadata\\aliyun-api-metadata-alert\\2015-08-15\\Api\\BatchQueryProject.json"
			],
			[
				"opensearch",
				"openapi-meta-master\\api-metadata\\aliyun-api-metadata-ons\\2015-10-20\\Api\\OnsSubscriptionSearch.json"
			],
			[
				"describeimage",
				"openapi-meta-master\\api-metadata\\aliyun-api-metadata-ecs\\2014-05-26\\Api\\DescribeImages.json"
			],
			[
				"listjob",
				"openapi-meta-master\\api-metadata\\aliyun-api-metadata-batchcompute\\2013-01-11\\Api\\ListJobs.json"
			],
			[
				"describeins",
				"2014-05-26\\src\\DescribeInstances.cpp"
			],
			[
				"routing_conn",
				"jni\\libmtun\\routing\\routing_conn_pool.cc"
			],
			[
				"tcp_http",
				"jni\\libmtun\\tcp\\tcp_http_relay.c"
			],
			[
				"tcp",
				"jni\\libmtun\\tcp\\tcp_proxy.c"
			],
			[
				"m4t",
				"jni\\libmtun\\m4t0.c"
			],
			[
				"scale",
				"jni\\libmtun\\routing\\routing_scale.cc"
			],
			[
				"routing_scal",
				"jni\\libmtun\\routing\\routing_scale.cc"
			],
			[
				"header",
				"jni\\libmtun\\http\\wspx_header.c"
			],
			[
				"config.ja",
				"protobuf\\com\\mato\\ndk\\wspx\\Config.java"
			],
			[
				"http_re",
				"jni\\libmtun\\http\\http_relay.c"
			],
			[
				"setting",
				"jni\\libmtun\\wspx_settings.c"
			],
			[
				"http_pro",
				"jni\\libmtun\\http\\http_proxy.c"
			],
			[
				"reque",
				"jni\\libmtun\\http\\http_request_parser.cc"
			],
			[
				"rou",
				"jni\\libmtun\\routing\\routing.h"
			],
			[
				"wspx.h",
				"jni\\libmtun\\wspx.h"
			],
			[
				"http_access",
				"jni\\libmtun\\http\\http_access_log.c"
			],
			[
				"request",
				"jni\\libmtun\\http\\http_request_parser.cc"
			],
			[
				"tunn",
				"jni\\libmtun\\mtunnel.c"
			],
			[
				"mtunn",
				"jni\\libmtun\\mtunnel.c"
			],
			[
				"matoj",
				"jni\\libwsld\\mato-jni.cc"
			],
			[
				"respon",
				"jni\\libmtun\\http\\http_response_parser.cc"
			],
			[
				"response_pa",
				"jni\\libmtun\\http\\http_response_parser.cc"
			],
			[
				"http_",
				"jni\\libmtun\\http\\http_relay.c"
			],
			[
				"wspx_header",
				"jni\\libmtun\\http\\wspx_header.c"
			],
			[
				"response_par",
				"jni\\libmtun\\http\\http_response_parser.cc"
			],
			[
				"wspx_log",
				"jni\\libmtun\\util\\wspx_log.c"
			],
			[
				"shrpx_sp",
				"jni\\libmtun\\spdy\\shrpx_spdy_session.cc"
			],
			[
				"http_proxy",
				"jni\\libmtun\\http\\http_proxy.c"
			],
			[
				"spdy_se",
				"jni\\libmtun\\spdy\\shrpx_spdy_session.cc"
			],
			[
				"routing_pr",
				"jni\\libmtun\\routing\\routing_proxy.cc"
			],
			[
				"http_pr",
				"jni\\libmtun\\http\\http_proxy.c"
			],
			[
				"mdns.c",
				"jni\\libmtun\\dns\\mdns.c"
			],
			[
				"mtun",
				"jni\\libmtun\\mtunnel.c"
			],
			[
				"nativ",
				"jni\\libwsld\\nativehook\\nativehook.cc"
			],
			[
				"http_relay",
				"jni\\libmtun\\http\\http_relay.c"
			],
			[
				"routing",
				"jni\\libmtun\\routing\\routing.h"
			],
			[
				"access",
				"jni\\libmtun\\http\\http_access_log.c"
			],
			[
				"settings",
				"jni\\libmtun\\wspx_settings.c"
			],
			[
				"routing_sca",
				"jni\\libmtun\\routing\\routing_scale.cc"
			],
			[
				"mtu",
				"jni\\libmtun\\mtunnel.c"
			],
			[
				"cutl",
				"jni\\libmtun\\util\\cutil.c"
			],
			[
				"tcp_proxy",
				"jni\\libmtun\\tcp\\tcp_proxy.c"
			],
			[
				"wspx_set",
				"jni\\libmtun\\wspx_settings.c"
			],
			[
				"response",
				"jni\\libmtun\\http\\http_response_parser.cc"
			],
			[
				"tcp_rp",
				"jni\\libmtun\\tcp\\tcp_proxy.c"
			],
			[
				"tcp_pro",
				"jni\\libmtun\\tcp\\tcp_proxy.c"
			],
			[
				"wspx_nd",
				"jni\\libmtun\\wspx_ndk.c"
			],
			[
				"routing_proxy",
				"jni\\libmtun\\routing\\routing_proxy.cc"
			],
			[
				"elfuti",
				"jni\\libwsld\\nativehook\\elfutils.h"
			],
			[
				"elfutils",
				"jni\\libwsld\\nativehook\\elfutils.cc"
			],
			[
				"val",
				"jni\\test\\val.txt"
			],
			[
				"http_response",
				"jni\\libmtun\\http\\http_response_parser.cc"
			],
			[
				"wspx_se",
				"jni\\libmtun\\wspx_settings.c"
			],
			[
				"elftu",
				"jni\\libwsld\\nativehook\\elfutils.cc"
			],
			[
				"wspx_sett",
				"jni\\libmtun\\wspx_settings.c"
			],
			[
				"jpeglib",
				"jni\\third_party\\libjpeg\\jpeglib.h"
			],
			[
				"routing.h",
				"jni\\libmtun\\routing\\routing.h"
			],
			[
				"evdns.c",
				"ios\\third_party\\libevent\\build\\build\\src\\libevent-2.0.21-stable\\evdns.c"
			],
			[
				"spdy_",
				"jni\\libmtun\\spdy\\shrpx_spdy_session.cc"
			],
			[
				"response_",
				"jni\\libmtun\\http\\http_response_parser.cc"
			],
			[
				"tcp_http_",
				"jni\\libmtun\\tcp\\tcp_http_relay.c"
			],
			[
				"http_reque",
				"jni\\libmtun\\http\\http_request_parser.cc"
			],
			[
				"http_prox",
				"jni\\libmtun\\http\\http_proxy.c"
			],
			[
				"test",
				"jni\\third_party\\libjpeg-turbo\\cmakescripts\\testclean.cmake"
			],
			[
				"util",
				"jni\\third_party\\libwebp\\src\\utils\\utils.c"
			],
			[
				"cutil",
				"jni\\libmtun\\util\\cutil.c"
			],
			[
				"spdy_wr",
				"jni\\libmtun\\spdy\\spdy_wrapper.cc"
			],
			[
				"tes",
				"jni\\third_party\\libjpeg-turbo\\cmakescripts\\testclean.cmake"
			],
			[
				".proto",
				"protobuf\\config.proto"
			],
			[
				"ual",
				"jni\\third_party\\ustl\\bits\\ualgobase.h"
			],
			[
				"muti",
				"jni\\libmtun\\util\\mutils.c"
			],
			[
				"shrpx_spdy",
				"jni\\libmtun\\spdy\\shrpx_spdy_session.cc"
			],
			[
				"testcc",
				"jni\\third_party\\libjpeg-turbo\\cmakescripts\\testclean.cmake"
			],
			[
				"routing_s",
				"jni\\libmtun\\routing\\routing_scale.cc"
			],
			[
				"spdy",
				"jni\\libmtun\\spdy\\spdy_wrapper.cc"
			],
			[
				"va",
				"jni\\test\\val.txt"
			],
			[
				"http",
				"jni\\libmtun\\http\\http_proxy.c"
			],
			[
				"shrpx_han",
				"jni\\libmtun\\spdy\\shrpx_client_handler.cc"
			],
			[
				"val.txt",
				"jni\\test\\val.txt"
			],
			[
				"http_acc",
				"jni\\libmtun\\http\\http_access_log.h"
			],
			[
				"access.",
				"jni\\libmtun\\http\\http_access_log.c"
			],
			[
				"pt",
				"jni\\third_party\\libpt\\pt_session_udp.c"
			],
			[
				"http_request",
				"jni\\libmtun\\http\\http_request_parser.cc"
			],
			[
				"wspx_",
				"jni\\libmtun\\wspx_settings.c"
			],
			[
				"shrpx_clie",
				"jni\\libmtun\\spdy\\shrpx_client_handler.cc"
			],
			[
				"m4",
				"libmtun\\m4t0.c"
			],
			[
				"evdn",
				"third_party\\libevent\\evdns.c"
			],
			[
				"http_respons",
				"libmtun\\http\\http_response_parser.cc"
			],
			[
				"http_ac",
				"libmtun\\http\\http_access_log.c"
			],
			[
				"mdns_re",
				"libmtun\\dns\\mdns_resolve.cc"
			],
			[
				"tcp_re",
				"libmtun\\tcp\\tcp_http_relay.c"
			],
			[
				"wspx_lo",
				"libmtun\\util\\wspx_log.c"
			],
			[
				"routing_prox",
				"libmtun\\routing\\routing_proxy.cc"
			],
			[
				"http_respos",
				"libmtun\\http\\http_response_parser.cc"
			],
			[
				"http_req",
				"libmtun\\http\\http_request_parser.cc"
			],
			[
				"proxy",
				"libmtun\\http\\http_proxy.c"
			],
			[
				"http_rel",
				"libmtun\\http\\http_relay.c"
			],
			[
				"http_par",
				"third_party\\libhttp-parser\\http_parser.c"
			],
			[
				"cutil.h",
				"libmtun\\util\\cutil.h"
			],
			[
				"mdns",
				"libmtun\\dns\\mdns.c"
			],
			[
				"tes.",
				"test\\test.cc"
			],
			[
				"downstream_",
				"libmtun\\spdy\\shrpx_downstream_connection.cc"
			],
			[
				"down",
				"libmtun\\spdy\\shrpx_downstream.cc"
			],
			[
				"http_requ",
				"libmtun\\http\\http_request_parser.cc"
			],
			[
				"hrpx_spdy_downstream_connection.cc",
				"libmtun\\spdy\\shrpx_spdy_downstream_connection.cc"
			],
			[
				"http_u",
				"libmtun\\http\\http_util.cc"
			],
			[
				"http_ut",
				"libmtun\\spdy\\shrpx_http_upstream.cc"
			],
			[
				"mato-",
				"libwsld\\mato-jni.cc"
			],
			[
				"vers",
				"libmtun\\version.h"
			],
			[
				"wspx.",
				"libmtun\\wspx.h"
			],
			[
				"httpp",
				"libmtun\\http\\http_proxy.c"
			],
			[
				"mdns_ca",
				"libmtun\\dns\\mdns_cache.cc"
			],
			[
				"pt_s",
				"third_party\\libpt\\pt_session.c"
			],
			[
				"cuti",
				"libmtun\\util\\cutil.c"
			],
			[
				"tet",
				"third_party\\libevent\\test\\test-time"
			],
			[
				"back",
				"libmtun\\backend_resolve.cc"
			],
			[
				"redso",
				"libmtun\\redsocks.c"
			],
			[
				"http_resp",
				"libmtun\\http_response_parser.cc"
			],
			[
				"red",
				"libmtun\\redsocks.c"
			],
			[
				"mdns.cc",
				"libmtun\\util\\mdns.cc"
			],
			[
				"redsoc",
				"libmtun\\redsocks.c"
			],
			[
				"cpp",
				"libmtun\\util\\cpputil.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"tr",
				"F:\\mobile\\rd\\wspx\\tags\\libwspx_4.2.1_release_001\\jni\\421_001.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 350.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
